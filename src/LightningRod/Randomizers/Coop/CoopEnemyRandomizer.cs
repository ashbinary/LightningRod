using LightningRod.Libraries.Byml;
using LightningRod.Libraries.Sarc;
using LightningRod.Utilities;

namespace LightningRod.Randomizers.Coop;
public static class CoopEnemyRandomizer
{
    public static void Randomize()
    {
        BymlArrayNode coopEnemyInfo = GameData.FileSystem.ParseByml(
            $"/RSDB/CoopEnemyInfo.Product.{GameData.GameVersion}.rstbl.byml.zs"
        );
        
        List<CoopEnemy> coopEnemyList = [];

        List<EnemyType> enemyTypeList = [EnemyType.Rare];

        if (Options.GetOption("allowLesserKingSwap"))
            enemyTypeList.AddRange([EnemyType.Zako, EnemyType.Boss]);

        foreach (dynamic coopEnemy in coopEnemyInfo.Array)
        {
            string coopEnemyType = coopEnemy["Category"].Data;
            coopEnemyList.Add(new CoopEnemy(coopEnemy["Type"].Data, coopEnemyType.ToEnum<EnemyType>())); // bro
        }

        // Give each enemy a specified randomization for each actor
        Dictionary<string, string> EnemyActorAssignment = [];

        var coopEnemyShuffleList = coopEnemyList.Where(e => e.Type.IsOfAnyType(enemyTypeList)).ToList();
        for (int i = 0; i < coopEnemyList.Count; i++)
        {
            if (coopEnemyList[i].Type != EnemyType.Rare) 
            {  
                i++;
                continue;
            } // i mean sure
            int randomNumber = GameData.Random.NextInt(coopEnemyShuffleList.Count);
            EnemyActorAssignment.Add(coopEnemyList[i].Name, coopEnemyShuffleList[randomNumber].Name);
            coopEnemyShuffleList.RemoveAt(randomNumber);
        }

        BymlIterator enemyIterator = new BymlIterator(2);

        List<EnemyType> salmonidTypeRandomize = [];
        if (Options.GetOption("randomizeSalmonidParams"))
            salmonidTypeRandomize.AddRange([EnemyType.Zako, EnemyType.Rare, EnemyType.EventRare]);
        if (Options.GetOption("randomizeKingParams"))
            salmonidTypeRandomize.Add(EnemyType.Boss);

        foreach (CoopEnemy enemy in coopEnemyList)
        {
            SarcFile enemyPack = GameData.FileSystem.ParseSarc(
                $"/Pack/Actor/CoopEnemy{enemy.Name}.pack.zs"
            );

            int enemyInfoIndex = enemyPack.GetSarcFileIndex($"Actor/CoopEnemy{enemy.Name}.engine__actor__ActorParam.bgyml");
            dynamic enemyInfo = FileUtils.ToByml(enemyPack.Files[enemyInfoIndex].Data).Root;
            string paramPath = enemyInfo["Components"]["GameParameterTable"].Data;

            if (enemy.Type.IsOfAnyType(salmonidTypeRandomize))
            {
                dynamic enemyParam = FileUtils.ToByml(enemyPack.GetSarcFileData(paramPath.Compile())).Root;
                enemyIterator.ProcessBymlRoot(enemyParam);
                enemyPack.Files[enemyPack.GetSarcFileIndex(paramPath.Compile())].Data = FileUtils.SaveByml(enemyParam); 
            }

            if (EnemyActorAssignment.TryGetValue(enemy.Name, out string? value))
            {
                enemyPack.Files.RemoveAt(enemyInfoIndex);
                enemyPack.Files.Add(
                    new SarcContent()
                    {
                        Name = $"Actor/CoopEnemy{value}.engine__actor__ActorParam.bgyml",
                        Data = FileUtils.SaveByml(enemyInfo)
                    }
                );
            }

            GameData.CommitToFileSystem(
                $"/Pack/Actor/CoopEnemy{enemy.Name}.pack.zs",
                FileUtils.SaveSarc(enemyPack).CompressZSTD()
            );
        }
    }
}

public class CoopEnemy(string name, EnemyType type) // bro <- autogenerated by copilot???
{
    public string Name = name;
    public EnemyType Type = type;
}

public enum EnemyType
{
    Zako,
    Rare,
    EventRare,
    Boss,
    Other,

}