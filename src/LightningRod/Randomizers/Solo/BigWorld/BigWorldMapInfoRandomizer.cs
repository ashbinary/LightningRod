using LightningRod.Libraries.Byml;
using LightningRod.Utilities;
using static LightningRod.Randomizers.BigWorldRandomizer;

namespace LightningRod.Randomizers.Solo.BigWorld;

public static class BigWorldMapInfoRandomizer
{
    public static void Randomize()
    {
        dynamic missionMapInfo = GameData.FileSystem.ParseByml(
            $"/RSDB/MissionMapInfo.Product.{GameData.GameVersion}.rstbl.byml.zs"
        );

        for (int i = 0; i < missionMapInfo.Length; i++)
        {
            if (missionStages[i].MapType != MsnMapType.ChallengeStage) continue;

            if (Options.GetOption("randomizeLevelFee") && !missionStages[i].SceneName.Contains(firstStageReplacement)) // first stage always stays the same
                missionMapInfo[i]["Admission"].Data = GameData.Random.NextInt(3) * 100; // idek my own random function

            dynamic supplyArray = missionMapInfo[i]["OctaSupplyWeaponInfoArray"];

            while (supplyArray.Length < 3)
                supplyArray.AddNodeToArray(CreateNewMsnNode());

            for (int index = 0; index < 3; index++)
            {
                if (Options.GetOption("randomizeLevelReward"))
                {
                    supplyArray[index]["FirstReward"].Data = GameData.Random.NextInt(1400) + 100; // 100 - 1500
                    supplyArray[index]["SecondReward"].Data = GameData.Random.NextInt(2500) + 500; // 500 - 3000
                }

                if (index == 0 && Options.GetOption("ensureFirstHeroWeapon")) continue;

                if (MiscUtils.RandomChance(10))
                {
                    supplyArray[index]["SpecialWeapon"].Data = GetSupplyArrayWeapon(GameData.weaponNames.WeaponInfoSpecial, "Special");
                    supplyArray[index]["SupplyWeaponType"].Data = "MainAndSpecial";

                    if (!MiscUtils.RandomChance(50)) break;

                    supplyArray[index]["SupplyWeaponType"].Data = "Special";
                    continue;
                }
                else
                {
                    supplyArray[index]["SubWeapon"].Data = GetSupplyArrayWeapon(GameData.weaponNames.WeaponInfoSub, "Sub");
                }

                supplyArray[index]["WeaponMain"].Data = GetSupplyArrayWeapon(GameData.weaponNames.WeaponInfoMain, "Main");
            }
        }

        GameData.CommitToFileSystem(
            $"/RSDB/MissionMapInfo.Product.{GameData.GameVersion}.rstbl.byml.zs",
            FileUtils.SaveByml((BymlArrayNode)missionMapInfo).CompressZSTD()
        );
    }

    public static string GetSupplyArrayWeapon(List<Weapon> weaponList, string weaponType)
    {
        string msnWeapon = weaponList.GetRandomIndex(WeaponType.Mission);

        return $"Work/Gyml/{msnWeapon}.spl__WeaponInfo{weaponType}.gyml";
    }

    public static BymlHashTable CreateNewMsnNode()
    {
        BymlHashTable newMsnNode = new();
        newMsnNode.AddHashPair("FirstReward", 1000, BymlNodeId.Int);
        newMsnNode.AddHashPair("IsRecommended", false, BymlNodeId.Bool);
        newMsnNode.AddHashPair("IsRepresentativeIconSecondary", false, BymlNodeId.Bool);
        newMsnNode.AddHashPair("SecondReward", 5000, BymlNodeId.Int);
        newMsnNode.AddHashPair("SpecialWeapon", "", BymlNodeId.String);
        newMsnNode.AddHashPair("SubWeapon", "", BymlNodeId.String);
        newMsnNode.AddHashPair("SupplyWeaponType", "Normal", BymlNodeId.String);
        newMsnNode.AddHashPair("WeaponMain", "", BymlNodeId.String);

        BymlHashTable dolphinMessage = new();
        dolphinMessage.AddHashPair(
            "DevText",
            "Mod generated by LightningRod. https://github.com/ashbinary/LightningRod",
            BymlNodeId.String
        );
        dolphinMessage.AddHashPair("Label", "", BymlNodeId.String);

        BymlHashPair dolphinPair = new();
        dolphinPair.Name = "DolphinMessage";
        dolphinPair.Id = BymlNodeId.Hash;
        dolphinPair.Value = dolphinMessage;

        newMsnNode.Pairs.Add(dolphinPair);
        return newMsnNode;
    }
}